#!/usr/bin/env bash

set -e

source /usr/local/etc/library.sh

SNAPSHOT_ID="${1?}"
REPOSITORY="${2}"
REPOSITORY_PASSWORD="${3}"

data_dir="$(get_nc_config_value datadirectory)"
kopia_flags=(--config-file=/usr/local/etc/kopia/restore.config --log-dir="/var/log/kopia" --no-persist-credentials)
kopia_repo_args=()
hostname=restore
config_dir="/usr/local/etc/kopia"
[[ -f "${config_dir}/repository.config" ]] && hostname=$(jq '.hostname' "${config_dir}/repository.config")
(
  source "${BINDIR}/BACKUPS/kopia.sh";
  [[ -f "${config_dir}/repository.config" ]] && cp "${config_dir}/repository.config" "${config_dir}/repository-bkp.config"
  setup_repository "${REPOSITORY}" "${STORAGE_KEY}" "${REPOSITORY_PASSWORD}" "$hostname"
  mv /usr/local/etc/kopia/repository.config /usr/local/etc/kopia/restore.config
  [[ -f "${config_dir}/repository-bkp.config" ]] && mv "${config_dir}/repository-bkp.config" "${config_dir}/repository.config"
)

export KOPIA_PASSWORD="$(source "${BINDIR}/BACKUPS/kopia.sh"; get_repository_password "${REPOSITORY_PASSWORD}")"

snapshot_json="$(ncp-kopia snapshot list --all --json | jq ".[] | select(.id | test(\"${SNAPSHOT_ID}\"))")"
obj_id="$(echo "${snapshot_json}" | jq -r '.rootEntry.obj')"
obj_name="$(echo "${snapshot_json}" | jq -r '.rootEntry.name')"
has_db="$(echo "${snapshot_json}" | jq -r '.tags."includes-db" == "yes"' || echo 'false')"
has_files="$(echo "${snapshot_json}" | jq -r '.tags."includes-files" == "yes"' || echo 'false')"
has_nc="$(echo "${snapshot_json}" | jq -r '.tags."includes-nextcloud" == "yes"' || echo 'false')"
has_ncp_config="$(echo "${snapshot_json}" | jq -r '.tags."includes-ncp-config" == "yes"' || echo 'false')"

trap restore_maintenance_mode EXIT

save_maintenance_mode || true
if [[ "$has_db" == "true" ]]
then
  echo "DB backup detected."
  if [[ -z "$data_dir" ]]
  then
    RESTORE_DIR="$(dirname "${data_dir}")/kopia-restore.XXXXXX"
  else
    RESTORE_DIR="$(mktemp -d "/tmp/kopia-restore.XXXXXX")"
  fi
  kopia "${kopia_flags[@]}" \
    snapshot restore \
      "${obj_id}/nextcloud-sqlbkp.sql" "${RESTORE_DIR}/nextcloud-sqlbkp.sql"
  cd "${RESTORE_DIR}"

  cleanup() { local RET=$?; echo "Cleanup..."; rm -rf "${RESTORE_DIR}" || true; restore_maintenance_mode; trap "" EXIT; exit $RET; }
  trap cleanup INT TERM HUP ERR EXIT

  mysql -u root <<EOFMYSQL
DROP DATABASE IF EXISTS nextcloud;
CREATE DATABASE nextcloud;
GRANT USAGE ON *.* TO '$DBADMIN'@'localhost' IDENTIFIED BY '$DBPASSWD';
DROP USER '$DBADMIN'@'localhost';
CREATE USER '$DBADMIN'@'localhost' IDENTIFIED BY '$DBPASSWD';
GRANT ALL PRIVILEGES ON nextcloud.* TO $DBADMIN@localhost;
EXIT
EOFMYSQL
  mysql -u root nextcloud <  "$RESTORE_DIR"/nextcloud-sqlbkp.sql || { echo "Error restoring nextcloud database"; return 1; }
  echo "Successfully restored database from backup."
fi

if [[ "$has_files" == "true" ]]
then
  echo "Files backup detected"
  subvol_dir="$(dirname "$data_dir")"
  [[ -e "$subvol_dir" ]] && {
    bk_target="$subvol_dir-$( date '+%FT%s' )"
    echo "backing up existing $subvol_dir to ${bk_target}..."
    mv "$subvol_dir" "${bk_target}" || exit 1
  }
  echo "restore datadir to $subvol_dir"

  mkdir -p "$subvol_dir"
  grep -q "btrfs" <(stat -fc%T "$subvol_dir") && which btrfs &>/dev/null && {
    rmdir "$subvol_dir"                  || exit 1
    btrfs subvolume create "$subvol_dir" || exit 1
  }
  chown www-data: "$subvol_dir"

  cleanup() { RET=$?; echo "Cleanup..."; restore_maintenance_mode; trap "" EXIT; exit $RET; }
  trap cleanup INT TERM HUP ERR EXIT

  echo "Restoring files..."
  kopia "${kopia_flags[@]}" \
    snapshot restore \
      --config-file /app/config/restore.config \
      "${obj_id}/ncdata" "${subvol_dir}"
  echo "Files restored sucessfully"
  exit
fi

if [[ "$has_nc" == "true" ]]
then
  echo "Nextcloud backup detected"
  [[ -e "/var/www/nextcloud" ]] && {
    bkp_target="/var/www/kopia-restore-nextcloud-$(date -Iseconds).tar.gz"
    bkp_target="${bkp_target/+00:00/}"
    bkp_target="${bkp_target//:/-}"
    echo "Backing up current nextcloud directory to "
    tar -caf "$bkp_target" "/var/www/nextcloud"
    rm -rf /var/www/nextcloud
  }
  echo "Restore nextcloud to /var/www/nextcloud"
  mkdir -p /var/www/nextcloud
  kopia "${kopia_flags[@]}" \
    snapshot restore \
      --config-file /app/config/restore.config \
      "${obj_id}/nextcloud" "/var/www/nextcloud"
  chown -R www-data:www-data /var/www/nextcloud
  sed -i "s|'datadirectory' =>.*|'datadirectory' => '${data_dir}',|" /var/www/nextcloud/config/config.php
  # Just in case we moved the opcache dir
  install_template "php/opcache.ini.sh" "/etc/php/${PHPVER}/mods-available/opcache.ini"

  # tmp upload dir
  mkdir -p "$data_dir/tmp"
  chown www-data: "$data_dir/tmp"
  ncc config:system:set tempdirectory --value "$data_dir/tmp"
  sed -i "s|^;\?upload_tmp_dir =.*$|upload_tmp_dir = $data_dir/tmp|" "/etc/php/${PHPVER}/cli/php.ini"
  sed -i "s|^;\?upload_tmp_dir =.*$|upload_tmp_dir = $data_dir/tmp|" "/etc/php/${PHPVER}/fpm/php.ini"
  sed -i "s|^;\?sys_temp_dir =.*$|sys_temp_dir = $data_dir/tmp|"     "/etc/php/${PHPVER}/fpm/php.ini"

  # logs
  ncc config:system:set logfile --value="${data_dir}/nextcloud.log"

  # update fail2ban logpath
  [[ -f /etc/fail2ban/jail.conf ]] && {
    sed -i "s|logpath  =.*|logpath  = ${data_dir}/nextcloud.log|" /etc/fail2ban/jail.conf
    pgrep fail2ban &>/dev/null && service fail2ban restart
  }

  # refresh nextcloud trusted domains
  bash /usr/local/bin/nextcloud-domain.sh

  # update the systems data-fingerprint
  ncc maintenance:data-fingerprint

  # refresh thumbnails
  ncc files:scan-app-data

  # restart PHP
  bash -c "sleep 5; source /usr/local/etc/library.sh; clear_opcache; service php${PHPVER}-fpm restart" &>/dev/null &

  echo "Nextcloud restored sucessfully"
fi

echo "Snapshot restored sucessfully"
